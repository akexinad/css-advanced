/*
When using float based layouts, childs elements lose their
height property. To fix this we can create a clearFix mixin
that fixes this small issue.
*/
/*
This mixin gives the element a coloured gradient.
Here it is used on icons as well as headings as an example.
*/
/*
This is an example of a partial scss file.


These elemnts go into the base file because these are the 
basic definitions of out entire project.
*/
/* The universal selector */
/* 
We also want to make sure that the before and after
pseudo elements also inherit these properties
*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* 
    this ensures that the box borders and paddinare are 
    not added to the total width or height of the box.

    It's also better practice to make box sizing inheritable 
    so you are able to change the box sizing when you need to.
     */
  box-sizing: inherit; }

html {
  /* 
    by declaring the font size at the root we can now 
    replace all out px units to rem units

    Using pixels to determine font size is very bad practice
    as it goes against the principles of accessability.
    https://www.24a11y.com/2019/pixels-vs-relative-units-in-css-why-its-still-a-big-deal/

    We should use a percentage of the browsers default font size, which is 16px.
     */
  /*
    One can argue that this makes part of typography, but this actually works
    as a definition checkpoint for setting our rem . 
    */
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    /* transform: translateX(-100px) rotate(-180deg); */
    transform: translateX(-10rem) rotate(-180deg); }
  80% {
    /* transform: translateX(10px); */
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    /* transform: translateX(100px) rotate(180deg); */
    transform: translateX(10rem) rotate(180deg); }
  80% {
    /* transform: translateX(-10px); */
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    /* transform: translateY(30px); */
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  background-color: #fff;
  /* padding: 30px; */
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* 
    sometimes with animations the entire element can shake uncontrollably.
    It is almost unnoticable sometimes but this is the fix.
     */
  backface-visibility: hidden;
  /* margin: 60px; */
  margin-bottom: 6rem; }
  .heading-primary--main {
    /* display is originally an inline element */
    display: block;
    /* font-size: 60px; */
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* 
        animation-delay: 3s;
        animation-iteration-count: 3;
         */ }
  .heading-primary--sub {
    display: block;
    /* font-size: 20px; */
    font-size: 2rem;
    font-weight: 700;
    /* letter-spacing: 17.4px; */
    letter-spacing: 1.75rem;
    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  /*
    Only using the prefixed version of a property is not future-proof
    insofar as browser compatibility is concerned. Once a browser fully
    supports a property it will drop the need for the prefix and instead
    come to need the unprefixed property.
    */
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  /*
    With a size so small there really is no need to use rem.
    */
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  text-transform: uppercase;
  font-size: 1.6rem;
  font-weight: 700; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

/*
this utililty can now be reused to center our texts
when we need to.
*/
.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-top-big {
  margin-top: 8rem; }

.u-margin-top-huge {
  margin-top: 10rem; }

/*
this is an example of a pseudo-class
pseudo classes represent special states of certain elements
*/
.btn {
  /* 
    This is an example of a pseudo element
    A pseudo element allows us to style only certain parts of elements.
    The after pseudo element allows to style the element after an event.
    You can think of it a virtual element that hides behind the actual element.
    */ }
  .btn:link, .btn:visited {
    font-size: 1.6rem;
    text-transform: uppercase;
    text-decoration: none;
    /* padding: 15px 40px; */
    padding: 1.5rem 4rem;
    /* 
        Since all elements have a box sizing of border box,
        you need to set display to inline block in order for the
        element to respect the padding provided.
         */
    display: inline-block;
    /* border-radius: 100px; */
    border-radius: 10rem;
    transition: all .2s;
    position: relative; }
  .btn:hover {
    transform: translateY(-3px);
    /* box-shadow: 0 10px 20px rgba(0, 0, 0, .2); */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    /* box-shadow: 0 5px 10px rgba(0, 0, 0, .2); */
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #fff; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    /* border-radius: 100px; */
    border-radius: 10rem;
    /* 
        we need to hide it behind the button and this can be done by giving it
        a position of absolute relative to current button.
         */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out 0.75s;
    /* 
        It automatically applies the styles to the element 
        that you have declared at the 0% mark
        in the custom animation before the animation starts.
        In this case, given that the animation has a delay of .75s, 
        the element begins with an opacity of 0 so we do not
        see the button until the animation commences. 
         */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.card {
  /*
    perspective is a property that gives the
    element a 3d look and feel.
    */
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  /*
    when positioning things aboslutely they lose their height
    property, similar to what happens with floats.

    Without the height property the card loses its perspective.
    
    This is why we need to explicit the height property on parent
    as well as the child.
    */
  height: 52rem; }
  .card__side {
    height: 52rem;
    transition: transform .8s ease;
    position: absolute;
    top: 0;
    left: 0;
    /*
        when you give items an aboslute position
        you will also need to specify the actual width
        you want them to have or else their width
        will naturally collapse.
        */
    width: 100%;
    /*
        this hides the back of the card when it is rotating.
        */
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    border-radius: 3px;
    /*
        the image overlaps the card and therefore loses its
        border radius. So we can use the overflow property
        to stop the image from overflowing the parent.
        */
    overflow: hidden;
    box-shadow: 0 1.5px 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    /*
        using the minus value ensures that the card
        rotates in the correct direction.
        */
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    /*
        A brand new css property.
        Blends the gradient with the image.
        */
    background-blend-mode: color;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%); }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: #fff;
    position: absolute;
    top: 12rem;
    right: 4rem;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    /*
        In order to fit the heading inside the card,
        the span element had to be duplicated at compile
        time.
        We need to clone the properties so they are applied
        to both spans.
        This property clones the properties to 
        all of the boxes that have been created
        */
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
    .card__details li {
      text-align: center;
      font-size: 1.5rem;
      padding: 1rem; }
      .card__details li:not(:last-child) {
        border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    text-align: center;
    margin-bottom: 8rem;
    color: #fff; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }

.composition {
  position: relative;
  /*
    The reason we use % to determine image sizes is related
    to responsive web design.

    Using % will ensure that the image scales with the size 
    of the view port.
    */
  /*
    scaling down the non-hovered images inside the composition
    */ }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all .2s;
    /*
        outline prop can give us the border with an offset 
        */
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform .2s; }
  .feature-box__icon {
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    /*
    Only using the prefixed version of a property is not future-proof
    insofar as browser compatibility is concerned. Once a browser fully
    supports a property it will drop the need for the prefix and instead
    come to need the unprefixed property.
    */
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    font-size: 6rem;
    margin-bottom: .5rem; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  /*
    we give every other element the opposite skew so it looks
    straight.
    */
  transform: skewX(-12deg); }
  .story__shape {
    position: relative;
    width: 15rem;
    height: 15rem;
    float: left;
    /*
        the height is relative to the element. Thus
        50% in this case the circle is 7.5 rem at 7.5rem
        (horizontal center) and 7.5rem (vertical center)

        This property will only work if you have explicited
        both the element's width and height.
        */
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    /*
        to create spacing between floated elements, it's easier
        to use the transform property.
        */
    transform: translateX(-3rem) skewX(12deg);
    /*
        since the blur affects the img, you are able to see the effect
        on the shape that covers the image. This property will
        remove and effects on the __shape element.
        */
    overflow: hidden; }
  .story__img {
    height: 100%;
    transform: translateX(-4rem) scale(1.4);
    transition: all .5s;
    backface-visibility: hidden; }
  .story__text {
    transform: skewX(12deg); }
  .story__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: #fff;
    text-transform: uppercase;
    font-size: 1.7rem;
    text-align: center;
    opacity: 0;
    transition: all .5s;
    /*
        this property can fix any vibrations that occur with
        trasitions.
        */
    backface-visibility: hidden; }
  .story:hover .story__caption {
    opacity: 1;
    transform: translate(-50%, -50%); }
  .story:hover .story__img {
    filter: blur(3px) brightness(80%);
    transform: translateX(-4rem) scale(1); }

.bg-video {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
  opacity: .15;
  /*
    always remember that when you have elemnts
    that overflow their container you can just set
    the overflow to hidden.
    */
  overflow: hidden; }
  .bg-video__content {
    height: 100%;
    width: 100%;
    /*
        this property will ensure that the child
        element fills the parent whilst maintaining
        its aspect ratio.

        This is the equivalent of the background image's 
        "cover" property for html elements.
        */
    object-fit: cover; }

.header {
  position: relative;
  height: 95vh;
  /* 
    here we have two background images.
    The first is this gradient which goes from left to right.
    Then we have the image.
     */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* 
    cover will ensure that the element within the viewport will
    always COVER the width. So when you alter the viewport width
    the width of header will also change.
     */
  background-size: cover;
  /* 
    when resizing the viewport, the image will crop along the bottom,
    staying in position along the top.
     */
  background-position: top;
  /* 
    NOTE: the first coordinate begins in the top left corner.
     */
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*
    We can now use nesting with our class names.
    */ }
  .header__logo-box {
    position: absolute;
    /* 
        the top and bottom props of this element are relative to its parent element.
        In this case it is the header element.
         */
    /* top: 40px; */
    top: 4rem;
    /* left: 40px; */
    left: 4rem; }
  .header__logo {
    /* height: 35px; */
    height: 3.5rem;
    animation: moveInRight 1s ease-out; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* 
        The top and left props are relative to parent header element.
        This will put the left side of the text box in the center, so to
        get the center to the text box to the center of the parent element
        we use transform to move 50% of the elements height to the top and left,
        thus positioning the text box in the center.
         */
    transform: translate(-50%, -50%);
    text-align: center; }

.row {
  /*
    max width makes our screen responsive
    */
  max-width: 114rem;
  /*
    method of centering block elements
    inside of other block elements.
    */
  margin: 0 auto;
  /*
    The NOT pseudo selector.
    The NOT pesudo-class will select everything except
    the selector you declare. In this instance all rows
    will have a margin bottom except the last row.
    */
  /*
    Since the child elements of the row element are floated,
    they lose their height property.
    And a way to fix this is to use a clearFix mixin.
    */
  /*
    This is an attribute selector.
    Below is an example of how we want to select all classes
    that begin with (^=) "col-".
    */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 6rem * 2) / 3); }
  .row .col-1-of-4 {
    width: calc((100% - 6rem * 3) / 4); }
  .row .col-2-of-3 {
    width: calc(((100% - 6rem * 2) / 3) * 2 + 6rem); }
  .row .col-2-of-4 {
    width: calc(((100% - 6rem * 3) / 4) * 2 + 6rem); }
  .row .col-3-of-4 {
    width: calc(((100% - 6rem * 3) / 4) * 3 + 2 * 6rem); }

.section-about {
  background-color: #eee;
  padding: 25rem 0;
  /*
    We give it a negative margin to move it up so it
    marries with the shorter of the polygon created in 
    the header.
    */
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/nat-4.jpg");
  background-size: cover;
  /*
    What is happening here?
    We are skewing the background by neg 7 degrees to get a similar we create
    in the main section above this one.

    Therefore to not have everything skew in this container we skew the direct children back to normal cancelling out the neg 7 by adding 7.
    */
  transform: skewY(-7deg);
  margin-top: -8rem;
  /*
     > : the direct child selector
     https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator

     this ensures that you ONLY select the DIRECT children. NOT ALL THE CHILDREN.

     Thus it will only apply on the div.row and not on the children
     of div.row.

     If we skewed everything by using '& *' then all the children would be skewed in the other direction by 7 degrees.
    */ }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #eee;
  padding: 25rem 0 15rem 0;
  margin-top: -10rem; }

.section-stories {
  position: relative;
  padding: 15rem 0;
  overflow: hidden;
  backface-visibility: hidden; }

.section-book {
  padding: 15rem 0;
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }

.book {
  /*
    Instead of using clip path, we can use this interesting
    technique to create a colour gradient.
    */
  background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 50%, transparent 50%), url("../img/nat-10.jpg");
  background-size: 100%;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.2);
  height: 50rem; }
  .book__form {
    width: 50%;
    padding: 6rem; }
